{"ast":null,"code":"import chroma from \"chroma-js\"; // import chroma, { hex } from \"chroma-js\";\n\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette) {\n  // Empty array that will generate each color and pallete with the data associated in seedColors.js\n  let newPalette = {\n    palleteName: starterPalette.palleteName,\n    id: starterPalette.id,\n    emoji: starterPalette.emoji,\n    colors: {}\n  }; // Build a new colors object that contains each level set to an empty array from const levels.\n\n  for (let level of levels) {\n    newPalette.colors[level] = [];\n  } // Loop over every color by calling generateScale function.\n  // color.color from seeColors.js list with \"10\"=== numberOfColors to call.\n  // .reverse() to reverse color list so it matches the direction of getRange() \n  // which is set from dark to middle to light. This direction is generated this way because\n  // the colors appear too dark if const end = black.\n\n\n  for (let color of starterPalette.colors) {\n    let scale = getScale(color.color, 10).reverse();\n\n    for (let i in scale) {\n      newPalette.colors[levels[i]].push({\n        name: `${color.name} ${levels[i]}`,\n        id: color.name.toLowerCase().replace(/ /g, \"-\"),\n        hex: scale[i],\n        rgb: chroma(scale[i]).css(),\n        rgba: chroma(scale[i]).css().replace(\"rgb\", \"rgba\").replace(\")\", \",1.0)\")\n      });\n    }\n  }\n\n  return newPalette;\n} // Define the color ranges. Generate an array with 3 different color values.\n// chroma(hexColor).darken(1.4)[to get hex value in chroma js].hex() === start at darkest color\n// hexColor === middle color / regular color\n// end === const end, as well as the end of the range\n\n\nfunction getRange(hexColor) {\n  const end = \"#fff\";\n  return [chroma(hexColor).darken(1.4).hex(), hexColor, end];\n} //generate a scale with all the different colors and take lightest color\n//that assigns it to the lowest level all the way to the darkest color \n//with the highest level.\n\n\nfunction getScale(hexColor, numberOfColors) {\n  return chroma.scale(getRange(hexColor)).mode(\"lab\").colors(numberOfColors);\n}\n\nexport { generatePalette };","map":{"version":3,"names":["chroma","levels","generatePalette","starterPalette","newPalette","palleteName","id","emoji","colors","level","color","scale","getScale","reverse","i","push","name","toLowerCase","replace","hex","rgb","css","rgba","getRange","hexColor","end","darken","numberOfColors","mode"],"sources":["/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/colorHelpers.js"],"sourcesContent":["import chroma from \"chroma-js\";\n// import chroma, { hex } from \"chroma-js\";\n\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette){\n    // Empty array that will generate each color and pallete with the data associated in seedColors.js\n    let newPalette = {\n        palleteName: starterPalette.palleteName,\n        id: starterPalette.id,\n        emoji: starterPalette.emoji,\n        colors: {}\n    };\n\n    // Build a new colors object that contains each level set to an empty array from const levels.\n    for(let level of levels) {\n        newPalette.colors[level] = [];\n    }\n\n    // Loop over every color by calling generateScale function.\n    // color.color from seeColors.js list with \"10\"=== numberOfColors to call.\n    // .reverse() to reverse color list so it matches the direction of getRange() \n    // which is set from dark to middle to light. This direction is generated this way because\n    // the colors appear too dark if const end = black.\n    for (let color of starterPalette.colors) {\n        let scale = getScale(color.color, 10).reverse();\n        for (let i in scale){\n            newPalette.colors[levels[i]].push({\n                name: `${color.name} ${levels[i]}`,\n                id: color.name.toLowerCase().replace(/ /g, \"-\"),\n                hex: scale[i],\n                rgb: chroma(scale[i]).css(),\n                rgba: chroma(scale[i]).css().replace(\"rgb\", \"rgba\").replace(\")\", \",1.0)\")\n            })\n        }\n    }\n\n    return newPalette;\n}\n\n// Define the color ranges. Generate an array with 3 different color values.\n// chroma(hexColor).darken(1.4)[to get hex value in chroma js].hex() === start at darkest color\n// hexColor === middle color / regular color\n// end === const end, as well as the end of the range\nfunction getRange(hexColor){\n    const end=\"#fff\";\n    return [\n        chroma(hexColor)\n        .darken(1.4)\n        .hex(),\n        hexColor,\n        end\n    ]\n}\n\n//generate a scale with all the different colors and take lightest color\n//that assigns it to the lowest level all the way to the darkest color \n//with the highest level.\nfunction getScale(hexColor, numberOfColors){\n    return chroma\n    .scale(getRange(hexColor))\n    .mode(\"lab\")\n    .colors(numberOfColors);\n}\n\nexport {generatePalette};"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB,C,CACA;;AAEA,MAAMC,MAAM,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,GAAxC,EAA6C,GAA7C,CAAf;;AAEA,SAASC,eAAT,CAAyBC,cAAzB,EAAwC;EACpC;EACA,IAAIC,UAAU,GAAG;IACbC,WAAW,EAAEF,cAAc,CAACE,WADf;IAEbC,EAAE,EAAEH,cAAc,CAACG,EAFN;IAGbC,KAAK,EAAEJ,cAAc,CAACI,KAHT;IAIbC,MAAM,EAAE;EAJK,CAAjB,CAFoC,CASpC;;EACA,KAAI,IAAIC,KAAR,IAAiBR,MAAjB,EAAyB;IACrBG,UAAU,CAACI,MAAX,CAAkBC,KAAlB,IAA2B,EAA3B;EACH,CAZmC,CAcpC;EACA;EACA;EACA;EACA;;;EACA,KAAK,IAAIC,KAAT,IAAkBP,cAAc,CAACK,MAAjC,EAAyC;IACrC,IAAIG,KAAK,GAAGC,QAAQ,CAACF,KAAK,CAACA,KAAP,EAAc,EAAd,CAAR,CAA0BG,OAA1B,EAAZ;;IACA,KAAK,IAAIC,CAAT,IAAcH,KAAd,EAAoB;MAChBP,UAAU,CAACI,MAAX,CAAkBP,MAAM,CAACa,CAAD,CAAxB,EAA6BC,IAA7B,CAAkC;QAC9BC,IAAI,EAAG,GAAEN,KAAK,CAACM,IAAK,IAAGf,MAAM,CAACa,CAAD,CAAI,EADH;QAE9BR,EAAE,EAAEI,KAAK,CAACM,IAAN,CAAWC,WAAX,GAAyBC,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAF0B;QAG9BC,GAAG,EAAER,KAAK,CAACG,CAAD,CAHoB;QAI9BM,GAAG,EAAEpB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBO,GAAjB,EAJyB;QAK9BC,IAAI,EAAEtB,MAAM,CAACW,KAAK,CAACG,CAAD,CAAN,CAAN,CAAiBO,GAAjB,GAAuBH,OAAvB,CAA+B,KAA/B,EAAsC,MAAtC,EAA8CA,OAA9C,CAAsD,GAAtD,EAA2D,OAA3D;MALwB,CAAlC;IAOH;EACJ;;EAED,OAAOd,UAAP;AACH,C,CAED;AACA;AACA;AACA;;;AACA,SAASmB,QAAT,CAAkBC,QAAlB,EAA2B;EACvB,MAAMC,GAAG,GAAC,MAAV;EACA,OAAO,CACHzB,MAAM,CAACwB,QAAD,CAAN,CACCE,MADD,CACQ,GADR,EAECP,GAFD,EADG,EAIHK,QAJG,EAKHC,GALG,CAAP;AAOH,C,CAED;AACA;AACA;;;AACA,SAASb,QAAT,CAAkBY,QAAlB,EAA4BG,cAA5B,EAA2C;EACvC,OAAO3B,MAAM,CACZW,KADM,CACAY,QAAQ,CAACC,QAAD,CADR,EAENI,IAFM,CAED,KAFC,EAGNpB,MAHM,CAGCmB,cAHD,CAAP;AAIH;;AAED,SAAQzB,eAAR"},"metadata":{},"sourceType":"module"}