[{"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/index.js":"1","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/App.js":"2","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/reportWebVitals.js":"3","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/palette.js":"4","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/seedColors.js":"5","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/ColorBox.js":"6","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/Palette.js":"7","/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/colorHelpers.js":"8"},{"size":535,"mtime":1664979628215,"results":"9","hashOfConfig":"10"},{"size":340,"mtime":1665497777267,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1664979628218,"results":"12","hashOfConfig":"10"},{"size":617,"mtime":1665005875381,"results":"13","hashOfConfig":"10"},{"size":9798,"mtime":1665496500625,"results":"14","hashOfConfig":"10"},{"size":1662,"mtime":1665174132253,"results":"15","hashOfConfig":"10"},{"size":755,"mtime":1665499074436,"results":"16","hashOfConfig":"10"},{"size":2274,"mtime":1665187446544,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1eoin9a",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"21"},"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/index.js",[],[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/App.js",[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/reportWebVitals.js",[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/palette.js",[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/seedColors.js",["44"],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/ColorBox.js",[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/Palette.js",[],[],"/Users/headquarters/Documents/GitHub/Colors-App/colors-app/src/colorHelpers.js",["45"],[],"import chroma, { hex } from \"chroma-js\";\n\nconst levels = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\nfunction generatePalette(starterPalette){\n    // Empty array that will generate each color and pallete with the data associated in seedColors.js\n    let newPalette = {\n        palleteName: starterPalette.palleteName,\n        id: starterPalette.id,\n        emoji: starterPalette.emoji,\n        colors: {}\n    };\n\n    // Build a new colors object that contains each level set to an empty array from const levels.\n    for(let level of levels) {\n        newPalette.colors[level] = [];\n    }\n\n    // Loop over every color by calling generateScale function.\n    // color.color from seeColors.js list with \"10\"=== numberOfColors to call.\n    // .reverse() to reverse color list so it matches the direction of getRange() \n    // which is set from dark to middle to light. This direction is generated this way because\n    // the colors appear too dark if const end = black.\n    for (let color of starterPalette.colors) {\n        let scale = getScale(color.color, 10).reverse();\n        for (let i in scale){\n            newPalette.colors[levels[i]].push({\n                name: `${color.name} ${levels[i]}`,\n                id: color.name.toLowerCase().replace(/ /g, \"-\"),\n                hex: scale[i],\n                rgb: chroma(scale[i]).css(),\n                rgba: chroma(scale[i]).css().replace(\"rgba\", \"rgba\").replace(\")\", \",1.0)\")\n            })\n        }\n    }\n\n    return newPalette;\n}\n\n// Define the color ranges. Generate an array with 3 different color values.\n// chroma(hexColor).darken(1.4)[to get hex value in chroma js].hex() === start at darkest color\n// hexColor === middle color / regular color\n// end === const end, as well as the end of the range\nfunction getRange(hexColor){\n    const end=\"#fff\";\n    return [\n        chroma(hexColor)\n        .darken(1.4)\n        .hex(),\n        hexColor,\n        end\n    ]\n}\n\n//generate a scale with all the different colors and take lightest color\n//that assigns it to the lowest level all the way to the darkest color \n//with the highest level.\nfunction getScale(hexColor, numberOfColors){\n    return chroma\n    .scale(getRange(hexColor))\n    .mode(\"lab\")\n    .colors(numberOfColors);\n}\n\nexport {generatePalette};",{"ruleId":"46","severity":1,"message":"47","line":1,"column":1,"nodeType":"48","endLine":244,"endColumn":3},{"ruleId":"49","severity":1,"message":"50","line":1,"column":18,"nodeType":"51","messageId":"52","endLine":1,"endColumn":21},"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'hex' is defined but never used.","Identifier","unusedVar"]